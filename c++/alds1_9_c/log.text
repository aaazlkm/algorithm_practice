#include <iostream>
#include <cmath>

using namespace std;

//int BAN = -2;
int NIL = -1;
int MAX = 2000001;

int S[2000001];

int left(int i) {
    return 2 * i;
}

int right(int i) {
    return 2 * i + 1;
}

//void insert(int i, int value) {
//    if (MAX < i) {
//        return;
//    }
//
//    if (S[i] == NIL) {
//        S[i] = value;
//        return;
//    }
//
//    if (S[i] == BAN) {
//        insert(left(i), value);
//        return;
//    }
//
//    if (value < S[i]) {
//        insert(left(i), value);
//    } else {
//        insert(right(i), value);
//    }
//}
//
//int extract() {
//    if (S[1] == NIL) {
//        return NIL;
//    }
//    int i = 1;
//    while (true) {
//        if (right(i) < MAX && S[right(i)] != NIL && S[right(i)] != BAN) {
//            i = right(i);
//        } else if (S[i] == BAN && (left(i) < MAX  && S[left(i)] != NIL)) {
//            i = left(i);
//        } else {
//            int result = S[i];
//            if (left(i) < MAX  && S[left(i)] != NIL) {
//                S[i] = BAN;
//            } else {
//                S[i] = NIL;
//            }
//            return result;
//        }
//    }
//}
void insert(int i, int value) {
    if (MAX < i) {
        return;
    }

    if (S[i] == NIL) {
        S[i] = value;
        return;
    }

    if (value < S[i]) {
        insert(left(i), value);
    } else {
        insert(right(i), value);
    }
}

void renewKey(int i) {
    int temp = S[i];
    S[i] = NIL;
    insert(1, temp);
    if (left(i) < MAX && S[left(i)] != NIL) {
        renewKey(left(i));
    }
    if (right(i) < MAX && S[right(i)] != NIL) {
        renewKey(right(i));
    }
}

int extract() {
    if (S[1] == NIL) {
        return NIL;
    }
    int i = 1;
    while (true) {
        if (right(i) < MAX && S[right(i)] != NIL) {
            i = right(i);
        } else {
            int result = S[i];
            S[i] = NIL;

            if (left(i) < MAX && S[left(i)] != NIL) {
                renewKey(left(i));
            }
            return result;
        }
    }
}

void printNode(int i) {
    cout << S[i] << " ";
    if (left(i) < MAX && S[left(i)] != NIL) {
        cout << "l: " << S[left(i)]<< " ";
    }
    if (right(i) < MAX && S[right(i)] != NIL) {
        cout << "r: " << S[right(i)]<< " ";
    }
    cout << endl;
    if (left(i) < MAX && S[left(i)] != NIL) {
        printNode(left(i));
    }
    if (right(i) < MAX && S[right(i)] != NIL) {
        printNode(right(i));
    }
}

int main() {
    std::cin.tie(nullptr), std::ios::sync_with_stdio(false);

    fill_n(S, 2000001, NIL);

    while (true) {
        string command;
        cin >> command;
        if (command == "insert") {
            int value;
            cin >> value;
            insert(1, value);
        } else if (command == "extract") {
            int value = extract();
            cout << value << endl;
        } else if (command == "end") {
            break;
        }
//        cout << "======= tree ======" << endl;
//        printNode(1);
//        cout << "======= tree end ======" << endl;

    }
    return 0;
}

998487
998484
998018
993624
992224
991855
991775
990833
990419
989888
988557
987984
987000
984838
984370
983583
983331
982510
982384
982267
980090
979690
979634
976528
976466
975152
974263
973902
973890
971110
970491
969874
969356
969070
968674
968316
967244
965957
965620
962273
959585
958746
957932
954509
954182
953787
953564
960978
953398
952711
951940
951723
951718
997117
951684
950701
950427
950142
947925
945608
945038
943845
940838
938503
937972
937363
935123
934695
934474
934104
932214
932169
931204
931134
929173
928757
928353
928080
927100
926313
925557
923565
922353
920401
920226
919245
918184
917810
917078
956955
915491
914710
914655
912098
912089
911711
911703
910311
909373
909176
909133
908657
908256
906089
965852
905455
904716
902483
901149
900753
898585
897092
894842
894563
891966
890282
888169
967772
888154
887763
887337
887256
886571
886342
884893
884323
947764
899552
884112
884083
883767
882794
882480
880779
877747
877575
877144
885281
875958
913816
875725
875695
874771
874732
901816
916797
873477
880311
872853
872782
871958
978154
870255
869415
868148
865737
947583
861359
986443
861309
996397
860471
859435
858668
858591
874346
937459
858287
856647
854726
851789
849098
848449
994473
971933
907616
848275
848174
848150
848038
975687
967246
846520
846098
846017
845055
844165
844030
842825
932195
841629
840796
840042
876016
839727
837891
836549
835719
959036
834510
833934
832017
831917
831363
830340
905431
827604
827548
827153
827071
827055
827009
826911
824641
824515
823932
977006
936797
823673
823640
822158
822125
821822
821529
819437
819247
819183
818732
818666
817825
817290
817238
817128
850671
892107
836441
817048
816430
816179
921717
815710
815168
917957
814910
813595
813391
810055
808788
807728
816289
807480
952478
904919
807452
804875
803426
799868
799588
798883
797611
797353
797047
906704
797031
796183
795941
793905
792834
981415
792728
792585
792520
789554
789171
788522
788390
785653
784847
783821
783404
973391
783312
920851
780975
780715
780249
777970
777678
776516
914803
776169
775615
775475
774338
772843
771559
990003
949528
770466
770292
769794
769057
767218
769303
789738
765933
763463
763209
774935
762665
762220
761397
761036
760324
759001
860646
819255
784439
976381
758178
894031
757930
757590
756015
755460
755198
754108
753386
751896
751767
751563
847000
750578
858359
750431
749906
749367
749304
748948
748822
748632
999808
748438
747337
746292
746014
745614
744708
744350
742720
742564
880253
742211
742166
741976
740977
737292
914355
748198
777026
737078
736414
735694
989097
733278
903025
731875
730604
977854
729120
727456
727422
727410
727279
726709
726419
851915
726364
758795
725528
741166
725366
723143
723017
721672
720893
719946
719385
940845
719310
718917
717375
716674
921500
716241
714230
713806
982510
915460
779497
712616
711606
708888
708870
707877
707626
707565
707445
957572
874762
829566
823733
804955
772825
744140
767854
707209
706223
706088
983244
991724
880545
873084
705731
705582
704243
703732
702629
699817
993049
798558
792419
699711
808779
695048
694319
692743
692252
691982
691981
936700
905125
691067
690903
689365
689310
914876
689035
688810
688753
688114
687334
687163
686847
686495
699052
685731
685007
681891
681368
680857
680395
795604
712487
680162
679563
916899
678472
749460
677899
677531
736678
677414
677188
675386
675250
674760
673572
673045
704325
672618
672380
671750
671546
670932
824787
821948
820512
669847
669700
668831
668324
811369
667212
667042
713395
666695
665130
664838
659376
700912
658048
901811
948537
912895
851381
768183
656719
655714
916380